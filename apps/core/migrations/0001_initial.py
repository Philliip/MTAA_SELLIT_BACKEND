# Generated by Django 4.1.7 on 2023-03-20 17:34

import apps.core.managers.user
import apps.core.models.base
import apps.core.models.image
import apps.core.models.user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(max_length=120, unique=True, verbose_name='user_username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='user_email')),
                ('name', models.CharField(max_length=30, verbose_name='user_name')),
                ('surname', models.CharField(max_length=150, verbose_name='user_surname')),
                ('is_active', models.BooleanField(default=True, verbose_name='user_is_active')),
                ('image', models.ImageField(default='/Users/phillip/Desktop/GitHub/MTAA_SELLIT/private/images/users/default_image.jpg', max_length=255, storage=apps.core.models.base.PrivateFileStorage(), upload_to=apps.core.models.user.User._upload_to_path, verbose_name='user_image')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'default_permissions': ('add', 'delete'),
            },
            managers=[
                ('objects', apps.core.managers.user.UserManager()),
                ('all_objects', apps.core.managers.user.UserManager(alive_only=False)),
            ],
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=200, null=True, verbose_name='apikey_name')),
                ('platform', models.CharField(choices=[('web', 'web'), ('android', 'android'), ('ios', 'ios'), ('debug', 'debug')], default='debug', max_length=10, verbose_name='apikey_platform')),
                ('secret', models.CharField(max_length=30, verbose_name='apikey_secret')),
                ('is_active', models.BooleanField(default=False, verbose_name='apikey_is_active')),
            ],
            options={
                'verbose_name': 'api_key',
                'verbose_name_plural': 'api_keys',
                'db_table': 'api_keys',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='category_name')),
            ],
            options={
                'db_table': 'categories',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='city_name')),
                ('psc', models.CharField(max_length=10, verbose_name='city_zip')),
            ],
            options={
                'db_table': 'cities',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(null=True, verbose_name='token_expires_at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to=settings.AUTH_USER_MODEL, verbose_name='token_user')),
            ],
            options={
                'db_table': 'tokens',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=200, verbose_name='offer_tittle')),
                ('description', models.CharField(max_length=255, verbose_name='offer_description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=5)),
                ('views', models.IntegerField(default=0)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='core.category', verbose_name='offer_category')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='core.city', verbose_name='offer_city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to=settings.AUTH_USER_MODEL, verbose_name='post_user')),
            ],
            options={
                'db_table': 'offers',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('path', models.FileField(max_length=255, storage=apps.core.models.base.PrivateFileStorage(), upload_to=apps.core.models.image.Image._upload_to_path, verbose_name='image_path')),
                ('mime_type', models.CharField(choices=[('image/jpeg', 'Jpeg'), ('image/png', 'Png')], db_column='mime_type', max_length=20)),
                ('offer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.offer', verbose_name='image_offer')),
            ],
            options={
                'db_table': 'images',
                'default_permissions': (),
            },
        ),
    ]
